'use strict';

const inputName = document.querySelector('.input-name');
const inputDate = document.querySelector('.input-date');
const inputComment = document.querySelector('.input-comment');
const btnSubmit = document.querySelector('.btn-submit');

const currentDate = new Date();

const commentsList = [
    {
        name: '–ù–∏–∫–∏—Ç–∞',
        date: new Date(currentDate - 2 * 24 * 3600 * 1000).toLocaleDateString(),
        time: currentDate.toLocaleTimeString().slice(0, -3),
        text: '–ö–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ —Å—á–∏—Ç–∞—Ç—å, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –Ω–∞ –±–∞–∑–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—ã–≤–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —è—Ä–∫–∏–π –ø—Ä–∏–º–µ—Ä –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω—ä—é–Ω–∫—Ç—É—Ä—ã, –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–º–∏ –æ–±—â–µ—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã —ç—Ç–∏–∫–∏ –∏ –º–æ—Ä–∞–ª–∏. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ç–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è, —á—Ç–æ –Ω–∞—á–∞–ª–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤.',
        like: 46,
        isLiked: false,
    },
    {
        name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
        date: new Date(currentDate - 24 * 3600 * 1000).toLocaleDateString(),
        time: currentDate.toLocaleTimeString().slice(0, -3),
        text: '–õ–∏—à—å –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–≤—è–∑–µ–π –ª–∏—à—å –¥–æ–±–∞–≤–ª—è—é—Ç —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π –∏ –æ–±–Ω–∞—Ä–æ–¥–æ–≤–∞–Ω—ã. –í–æ—Ç –≤–∞–º —è—Ä–∫–∏–π –ø—Ä–∏–º–µ—Ä —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π ‚Äî —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–µ–æ—Ä–∏—è –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã—Å–æ–∫—É—é –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–∏—Ç–∏–∫.',
        like: 28,
        isLiked: true,
    },
    {
        name: '–°–µ—Ä–≥–µ–π',
        date: currentDate.toLocaleDateString(),
        time: currentDate.toLocaleTimeString().slice(0, -3),
        text: '–í —Ä–∞–º–∫–∞—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤, –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–≤—è–∑–µ–π –ª–∏—à—å –¥–æ–±–∞–≤–ª—è—é—Ç —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π –∏ –æ–±—ä—è–≤–ª–µ–Ω—ã –Ω–∞—Ä—É—à–∞—é—â–∏–º–∏ –æ–±—â–µ—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã —ç—Ç–∏–∫–∏ –∏ –º–æ—Ä–∞–ª–∏.',
        like: 11,
        isLiked: false,
    },
];

function printCommentsList() {
    document.querySelector('.comments-list').innerHTML = '';
    for (let [i, listItem] of Object.entries(commentsList)) {
        const comment = document.createElement('div');
        comment.id = `comment-${i}`;
        comment.className = 'comment';
        comment.innerHTML = `
        <div class="flex-wrapper">
            <div class="author">${listItem.name}</div>
            <div class="date">${((date) => {
                if (new Date().getDate() - parseInt(date.slice(0, 2)) == 1) {
                    return '–≤—á–µ—Ä–∞';
                } else if (new Date().getDate() - parseInt(date.slice(0, 2)) == 0) {
                    return '—Å–µ–≥–æ–¥–Ω—è';
                }
                return date;
            })(listItem.date)}, ${listItem.time}</div>
            <ion-icon id="delete-${i}" class="delete" name="trash-outline" data-delete></ion-icon>
        </div>
        <div class="text">
            ${listItem.text}
        </div>
        <div id="like-${i}" class="like" data-like>${listItem.isLiked ? '‚ù§Ô∏è' : 'ü§ç'} ${listItem.like}</div>
        `;
        document.querySelector('.comments-list').append(comment);
    }
}

printCommentsList();

btnSubmit.addEventListener('click', (event) => {
    event.preventDefault();

    if (inputName.value.trim() == '' || inputComment.value.trim() == '') {
        if (inputName.value.trim() == '' && !inputName.classList.contains('input-error')) {
            inputName.classList.toggle('input-error');
            document.querySelector('.input-name-error-message').classList.toggle('hidden');
        }
        if (inputComment.value.trim() == '' && !inputComment.classList.contains('input-error')) {
            inputComment.classList.toggle('input-error');
            document.querySelector('.input-comment-error-message').classList.toggle('hidden');
        }
        return;
    }

    const currentDate = new Date();

    commentsList.push({
        name: inputName.value.trim(),
        date: inputDate.value == '' ? currentDate.toLocaleDateString() : new Date(inputDate.value).toLocaleDateString(),
        time: currentDate.toLocaleTimeString().slice(0, -3),
        text: inputComment.value.trim(),
        like: 0,
        isLiked: false,
    });

    inputName.value = '';
    inputDate.value = '';
    inputComment.value = '';

    printCommentsList();
});

inputName.addEventListener('focus', (event) => {
    if (inputName.classList.contains('input-error')) {
        inputName.classList.toggle('input-error');
        document.querySelector('.input-name-error-message').classList.toggle('hidden');
    }
});

inputComment.addEventListener('focus', (event) => {
    if (inputComment.classList.contains('input-error')) {
        inputComment.classList.toggle('input-error');
        document.querySelector('.input-comment-error-message').classList.toggle('hidden');
    }
});

inputName.addEventListener('input', (event) => {
    if (inputName.classList.contains('input-error')) {
        inputName.classList.toggle('input-error');
        document.querySelector('.input-name-error-message').classList.toggle('hidden');
    }
});

inputComment.addEventListener('input', (event) => {
    if (inputComment.classList.contains('input-error')) {
        inputComment.classList.toggle('input-error');
        document.querySelector('.input-comment-error-message').classList.toggle('hidden');
    }
});

document.addEventListener('click', (event) => {
    const commentId = parseInt(event.target.id.slice(-1));
    if (event.target.dataset.like != undefined) {
        if (commentsList[commentId].isLiked == false) {
            commentsList[commentId].like += 1;
            commentsList[commentId].isLiked = true;
        } else {
            commentsList[commentId].like -= 1;
            commentsList[commentId].isLiked = false;
        }
    } else if (event.target.dataset.delete != undefined) {
        delete commentsList[commentId];
    }
    printCommentsList();
});

inputComment.addEventListener('keydown', (event) => {
    if (event.key == 'Enter' && !event.shiftKey) {
        event.preventDefault();
        btnSubmit.click();
        return;
    }
});
